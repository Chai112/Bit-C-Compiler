{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15760\viewh10700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'a3import itC // import standard library\
\
[4] apple = 2;\
[4] fruit = apple;\
\
[4]<4> fruit2; // array of int length 4\
\
fruit2<2> // access in index 2 \
\
class basketC\
\{\
	[4] fruits,\
	[3]<4> name;\
	[4] addFruits : [4] addBy\
	\{\
		fruits = fruits + addBy;\
		return fruits;\
	\}\
\}\
\
[*0] deleteFruits : basketC b\
\{\
	b.fruits = 0;\
\}\
\
[*0] main :\
\{\
	basketC basket;\
	basket.addFruits(2);\
\
	ptr appleptr = &apple;\
	apple = *appleptr;\
\
	apple = apple + 1;\
	if : basket.fruits > apple // if value is 0\
	\{\
		[*1]<40> outMsg = <32> basket.fruits <8> "\\n";\
		print(basket.fruits);\
	\}\
	else\
	\{\
		[3]<4> msg;\
		msg<0> = "e";\
		msg<1> = "r";\
		msg<2> = "r";\
		msg<3> = "\\n";\
		out(msg);\
	\}\
	[3] count;\
	while : count // while value not 0\
	\{\
		count = count - 1;\
		[3]<2> outMsg = <1> count <1> "\\n";\
		print(outMsg);\
	\}\
\}\
\
\
\
[n] 2^n bits required\
[*n] bits required\
[n]<partition> make a partition\
\
signed variables must have n\
first bit is used for parity\
\
static/global variables must have s\
\
char (2^3 bits) [3]\
int (2^4 bits) [4]\
float (2^5 bits) [5]\
double (2^6 bits) [6]\
void (2^-1 bits) [*0] or [-1]\
bool (1 bit) [*1]\
? (create template)\
ptr (memory architecture) ptr\
\
[4] n s car; //an signed, static int named car\
[4] crayon = n s car + 2;\
\
technically, [4] and [1]<4> are the same but you can access using <>\
[*192] is [4]<12>\
so\
[*48] msg;\
[8]<6> msgC = <6> msg; //6 letter, utf8 string\
\
[3] byte\
[x] (having no <> means that it is implicitly read as [x]<1>)\
\
// the last <> can be assumed but that is a bit dangerous\
[*1]<8> bits = <8> byte; // allowed\
[*1]<9> bits2 = <9> byte; // ERR: not fully initialised could be unsafe\
[*1]<9> bits3 = <8> byte <1> 1; // allowed adds 1 on the end\
[*1]<9> bits4 = <8> byte; // ERR: not fully initialised could be unsafe\
[*1]<8> bits5 = <9> byte; // ERR: overflow unsafe\
\
' ' cast\
\
+ - / * % ^ \uc0\u8730  >> << && || ! == ~~ ( )\
\
sizeof()\
print()\
\
}